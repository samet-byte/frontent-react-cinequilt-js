import ReactDOM from 'react-dom';
// import App from './App';
// ReactDOM.render(
//     <React.StrictMode>
//         <AuthProvider>
//             <App />
//         </AuthProvider>
//     </React.StrictMode>,
//     document.getElementById('root')
// );





    const { user: pUser, accessToken } = useParams();
    // console.log(pUser + " \n" + roles + " \n" + accessToken)

    const qrAuth = async () => {
        if (pUser && accessToken
            // && roles
        ) {
            // const roleArray = [roles]
            setAuth({ user: pUser, pwd:'',  accessToken });

            console.log("QR Auth: " + auth?.user + " \n" + auth?.roles + " \n" + auth?.accessToken)
            navigate(from, { replace: true });
            // navigate('view-metadatas', { replace: true });
            // await handleSubmit()
        }
    }




// Author: sametbayat
// Dec 08, 2023 11:09 PM

import React, {useEffect} from 'react';
import useAuth from "../../hooks/useAuth";
import {useLocation, useNavigate, useParams} from "react-router-dom";
import axios from "../../api/axios";

function QrAuth() {

    const { setAuth } = useAuth(); // global auth
    const navigate = useNavigate();
    const location = useLocation();
    const from = location.state?.from?.pathname || "/";
    const LOGIN_URL = '/auth/authenticate';

    const { user, pwd } = useParams();

    console.log(user)
    console.log(pwd)

    const handleSubmit = async (e) => {
        e.preventDefault();

        try {
            const response = await axios.post(LOGIN_URL,
                JSON.stringify({ emailOrUsername: user, password: pwd }),
                {
                    headers: { 'Content-Type': 'application/json' },
                    withCredentials: true
                }
            );
            console.log(JSON.stringify(response?.data));
            //console.log(JSON.stringify(response));
            const accessToken = response?.data?.accessToken;
            const roles = response?.data?.roles;
            console.log(roles)

            localStorage.setItem('username', user)

            setAuth({ user, pwd, roles, accessToken });
            navigate(from, { replace: true });
        } catch (err) {
            alert('Error: ' + err?.response?.data?.message)
        }
    }


    useEffect(() => {
        if(user && pwd) {
            handleSubmit();
            navigate(from, { replace: true });
        }
    }, []);

    return (
        <div>
            <h1>QR Auth</h1>
            <h3>user: {user}</h3>
        </div>
    );
}

export default QrAuth;


<Route path="/qr/:user/:roles/:accessToken" element={<Login />} />


const [userInfo, setUserInfo] = useState(null);
    const [fIP, setfIP]  = useState("http://" + ip + ":3000")

    useEffect(() => {
        setfIP("http://" + ip + ":3000" + `/qr/${localStorage.getItem("username")}/${"ROLE_ADMIN"}/${auth?.accessToken}`)
    }, [userInfo]);






                {/*<div className='input-group mb-5'>*/}
                {/*    <label className='input-group-text' htmlFor='genre'>*/}
                {/*        Genre*/}
                {/*    </label>*/}
                {/*    <select*/}
                {/*        className='form-control col-span-small-6'*/}
                {/*        name='genre'*/}
                {/*        id='genre'*/}
                {/*        // required*/}
                {/*        value={genre}*/}
                {/*        onChange={handleInputChange}*/}
                {/*    >*/}
                {/*        <option value=''>Select Genre</option>*/}
                {/*        {ALL_GENRES.map((genre) => (*/}
                {/*            <option key={genre.id} value={genre.id}>*/}
                {/*                {genre.name}*/}
                {/*            </option>*/}
                {/*        ))}*/}
                {/*    </select>*/}
                {/*</div>*/}













                */}

                {/*<div className='input-group mb-5'>*/}
                {/*    <label className='input-group-text' htmlFor='posterUrl'>*/}
                {/*        Poster URL*/}
                {/*    </label>*/}
                {/*    <input*/}
                {/*    className='form-control col-span-small-6'*/}
                {/*    type='text'*/}
                {/*    name='posterUrl'*/}
                {/*    id='posterUrl'*/}
                {/*    // required*/}
                {/*    value={posterUrl}*/}
                {/*    onChange={(e) => handleInputChange(e)}*/}
                {/*    />*/}
                {/*</div>*/}



                /*
                import React from 'react';


                const MovieCard = ({ title, year, posterUrl }) => {
                    return (
                        <div className="card mb-3 justify-content-center" style={styles.card}>
                            <div className="row no-gutters">
                                <div className="col-md-4">
                                    <img src={posterUrl} alt="Movie Poster" className="img-fluid" style={styles.image} loading="lazy"/>
                                </div>
                                <div className="col-md-8 d-flex align-items-center">
                                    <div className="p-3">
                                        <h6>{title}</h6>
                                        <p>{year}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    );
                };

                const styles = {
                    card: {
                        maxWidth: '400px',
                    },
                    image: {
                        width: '100%',
                        height: 'auto',
                    },
                };

                export default MovieCard;
                */



// ['/login', '/signup', '/giris', '/kaydol', '/register', '/login/', '/service-unavailable', '/unauthorized', '/linkpage', '/linkpage/'];



// import React, { useEffect, useState } from 'react';
// import {Link} from 'react-router-dom';
// import { Nav, Navbar } from 'react-bootstrap';
// import Constants from '../../common/Constants';
// import PopSearch from "./search/PopSearch";
// import useLogout from "../../hooks/useLogout";
//
// const NavBar = () => {
//     const w_h = 50;
//     const [windowWidth, setWindowWidth] = useState(window.innerWidth);
//
//     useEffect(() => {
//         const handleResize = () => {
//             setWindowWidth(window.innerWidth);
//         };
//
//         window.addEventListener('resize', handleResize);
//
//         return () => {
//             window.removeEventListener('resize', handleResize);
//         };
//     }, []);
//
//     const navbarClass = `navbar navbar-dark bg-dark mb-5 ${windowWidth < 576 ? 'navbar-expand-sm' : 'navbar-expand-md'}`;
//
//     const logout = useLogout();
//
//     const signOut = async () => {
//         await logout();
//     }
//
//     return (
//         <Navbar collapseOnSelect className={navbarClass} bg="dark" variant="dark" expand="lg">
//             <Navbar.Brand href="/">
//                 <img
//                     alt=""
//                     src={Constants.APP_ICON_URL}
//                     width={w_h}
//                     height={w_h}
//                     className="d-inline-block align-top"
//                     loading="lazy"
//                 />
//                 {' '}
//             </Navbar.Brand>
//             <Navbar.Toggle aria-controls="basic-navbar-nav" />
//             <Navbar.Collapse id="basic-navbar-nav">
//                 <Nav className="mr-auto">
//                     <Nav.Link style={{ color: 'white' }} href="/">
//                         {Constants.APP_NAME}
//                     </Nav.Link>
//                     <Link to={'/'} className="nav-link">Home</Link>
//                     <Nav.Link href="/view-metadatas">View All of 'em</Nav.Link>
//                     {' '}
//                     <Nav.Link href="/add-metadata">Add new Content</Nav.Link>
//                     {' '}
//                     <Nav.Link href="/local">Local Files</Nav.Link>
//                     {' '}
//                     <Nav.Link href="/filmbuff">Film Buff</Nav.Link>
//                     {' '}
//                     <Nav.Link href="/search">Instant Search</Nav.Link>
//                     {' '}
//                     <PopSearch />
//                     {' '}
//                     <Nav.Link onClick={signOut} className="ms-2">Sign Out</Nav.Link>
//                     {' '}
//                     <Nav.Link href="/x">Experimental</Nav.Link>
//                 </Nav>
//             </Navbar.Collapse>
//         </Navbar>
//     );
// };
//
// export default NavBar;



            {/*<Row className="mt-4">*/}
            {/*    {filteredMetadatas.map((metadata, index) => (*/}
            {/*        <Col key={metadata.id} xs={12} sm={6} md={4} lg={3}>*/}
            {/*            <Card className="text-center">*/}
            {/*                <Link to={`/metadata-profile/${metadata.title}`} className="btn btn-info">*/}

            {/*                    <MovieCard*/}
            {/*                        title={metadata.title?.trim()}*/}
            {/*                        posterUrl={metadata.posterUrl}*/}
            {/*                        releaseYear={metadata.releaseYear}*/}
            {/*                        mediaType={metadata.type}*/}
            {/*                    />*/}
            {/*                </Link>*/}
            {/*            </Card>*/}
            {/*        </Col>*/}
            {/*    ))}*/}
            {/*</Row>*/}


            {/*<table  className='table table-responsive table-bordered table-hover shadow'>*/}
            {/*    <thead>*/}
            {/*    <tr className='text-center'>*/}
            {/*        <th colSpan={2}>{SortView(sortBy, handleSortChange, sortOrder, contentType, pageSize, pageNumber)}</th>*/}
            {/*        <th>Title</th>*/}
            {/*        <th>Director</th>*/}
            {/*        <th>Release Year</th>*/}
            {/*        <th>Duration</th>*/}
            {/*        <th>Genre</th>*/}
            {/*        <th>Type</th>*/}
            {/*    </tr>*/}
            {/*    </thead>*/}

            {/*    <tbody className="text-center">*/}
            {/*    {filteredMetadatas.map((metadata, index) => (*/}

            {/*        <tr key={metadata.id}>*/}
            {/*            <th scope="row" key={index}>{metadata.id}</th>*/}
            {/*            <Link to={`/metadata-profile/${metadata.title}`} className="btn btn-info">*/}
            {/*                <td>*/}
            {/*                    <img*/}
            {/*                        width={270 / 4}*/}
            {/*                        height={370 / 4}*/}
            {/*                        src={metadata.posterUrl}*/}
            {/*                        alt={metadata.title}*/}
            {/*                        loading={'lazy'}*/}
            {/*                    />*/}
            {/*                </td>*/}
            {/*            </Link>*/}

            {/*            <td>{metadata.title}</td>*/}
            {/*            <td>{metadata.director}</td>*/}
            {/*            <td>{metadata.releaseYear}</td>*/}
            {/*            <td>{metadata.duration}</td>*/}
            {/*            <td>{metadata.genre}</td>*/}
            {/*            <td>{metadata.type}</td>*/}


            {/*        </tr>*/}
            {/*    ))}*/}
            {/*    </tbody>*/}
            {/*</table>*/}


             {/* <MovieCard
                                                   title={metadata.title}
                                                    posterUrl={metadata.posterUrl}
                                                    mediaType={metadata.type}
                                                    releaseYear={metadata.releaseYear}
                                                    linkTo={`${Paths.METADATA_PROFILE}/${encodeURIComponent(metadata.title)}`}
                                                    />*/}



